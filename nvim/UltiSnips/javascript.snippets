priority -50

############
#  COMMON  #
############

# The smart snippets use a global options called
# "g:ultisnips_javascript.{option}" which can control the format
# of trailing semicolon, space before function paren, etc.
#
# e.g.
# let g:ultisnips_javascript = {
#      \ 'keyword-spacing': 'always',
#      \ 'semi': 'never',
#      \ 'space-before-function-paren': 'always',
#      \ }


global !p
from javascript_snippets import (
	semi, space_before_function_paren, keyword_spacing
)
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet get "Get Elements"
getElement${1/(T)|(C)|.*/(?1:s)(?2:s)/}By${1:T}${1/(T)|(I)|(C).*/(?1:agName)(?2:d)(?3:lassName)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
}

endsnippet

snippet fun "function (named)" b
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet vf "function (assigned to var)"
${1:var }${2:function_name} = function $2($3) {
	${VISUAL}$0
}
endsnippet

# Drop priority so this only triggers when not beginning of line.
priority -51
snippet fun "function (anonymous)" w
function($1) {
	${VISUAL}$0
}$2
endsnippet
priority -50

snippet anf "function (anonymous)" i
function($1) {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function(${1:window}) {
	${VISUAL}$0
}(${2:$1}))
endsnippet

snippet ;fe "Minify safe iife"
;(function(${1}) {
	${VISUAL}$0
}(${2}))
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10})
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for(${1:prop} in ${2:obj}){
	if($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

snippet if "if (condition) { ... }"
if(${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if(${1:true}) {
	${VISUAL}$0
}else`!p snip.rv = keyword_spacing(snip)`{
	${2}
}
endsnippet

snippet switch
switch(${VISUAL}${1:expression}) {
	case '${VISUAL}${3:case}':
		${4}
		break
	${0}
	default:
		${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case'${VISUAL}${1:case}':
	${VISUAL}$0
	break
endsnippet

snippet do "do { ... } while (condition)"
do{
	${VISUAL}$0
}while`!p snip.rv = keyword_spacing(snip)`(${1:/* condition */})`!p snip.rv = semi(snip)`
endsnippet

snippet ret "Return statement"
return ${VISUAL}$0
endsnippet

snippet us
'use strict'
endsnippet

snippet imp "import"
import ${2} from ${1}
endsnippet

# Debugging
snippet de
debugger
endsnippet
snippet cl "console.log"
console.log(${0})
endsnippet
snippet cd "console.debug"
console.debug(${0})
endsnippet
snippet ce "console.error"
console.error(${0})
endsnippet
snippet cw "console.warn"
console.warn(${0})
endsnippet
snippet ci "console.info"
console.info(${0})
endsnippet
snippet ct "console.trace"
console.trace(${0:label})
endsnippet
snippet ctime "console.time ... console.timeEnd"
console.time("${1:label}")
${0:${VISUAL}}
console.timeEnd("$1")
endsnippet
snippet ctimestamp "console.timeStamp"
console.timeStamp("${1:label}")
endsnippet
snippet ca "console.assert"
console.assert(${1:expression}, ${0:obj})
endsnippet
snippet cclear "console.clear"
console.clear()
endsnippet
snippet cdir "console.dir"
console.dir(${0:obj})
endsnippet
snippet cdirx "console.dirxml"
console.dirxml(${1:object})
endsnippet
snippet cgroup "console.group"
console.group("${1:label}")
${0:${VISUAL}}
console.groupEnd()
endsnippet
snippet cgroupc "console.groupCollapsed"
console.groupCollapsed("${1:label}")
${0:${VISUAL}}
console.groupEnd()
endsnippet
snippet cprof "console.profile"
console.profile("${1:label}")
${0:${VISUAL}}
console.profileEnd()
endsnippet
snippet ctable "console.table"
console.table(${1:"${2:value}"})
endsnippet
snippet clstr "console.log stringified"
console.log(JSON.stringify(${0}, null, 2))
endsnippet

# vim:ft=snippets:
